--
-- PostgreSQL database dump
--

-- Dumped from database version 12.2
-- Dumped by pg_dump version 12.2

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: notify_row_event(); Type: FUNCTION; Schema: public
--

CREATE FUNCTION public.notify_row_event() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
insertedId int;
begin
	-- save raw state in a log table
	INSERT INTO log_event
		("operation", "table", "old", "new")
	values
		(TG_OP, TG_TABLE_NAME, row_to_json(OLD), row_to_json(NEW))
	returning id INTO insertedId;
	-- notify listeners
	perform pg_notify('row_log_event_id', insertedId::text);
	return NULL;
END;
$$;


--
-- Name: notify_row_event_payload(); Type: FUNCTION; Schema: public
--

CREATE FUNCTION public.notify_row_event_payload() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
	perform pg_notify('row_payload', row_to_json(NEW)::text);
	return NULL;
END;
$$;


--
-- Name: notify_statement_event(); Type: FUNCTION; Schema: public
--

CREATE FUNCTION public.notify_statement_event() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
	insertedId int;
	oldTable jsonb;
	newTable jsonb;
begin
	if (TG_OP IN ('DELETE', 'UPDATE')) then
		select json_agg(old_table) into oldTable from old_table;
	end if;
	if (TG_OP IN ('INSERT', 'UPDATE')) then
		select json_agg(new_table) into newTable from new_table;
	end if;

	INSERT INTO log_event ("operation", "table", "old", "new")
    values (TG_OP, TG_TABLE_NAME, oldTable, newTable)
	returning id INTO insertedId;

	perform pg_notify('statement_log_event_id', insertedId::text);
    RETURN NULL;
END;
$$;


SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: log_event; Type: TABLE; Schema: public
--

CREATE TABLE public.log_event (
    id integer NOT NULL,
    operation character varying(7),
    "table" character varying(50),
    old jsonb,
    new jsonb,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL
);


--
-- Name: raw_event_id_seq; Type: SEQUENCE; Schema: public
--

CREATE SEQUENCE public.raw_event_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: raw_event_id_seq; Type: SEQUENCE OWNED BY; Schema: public
--

ALTER SEQUENCE public.raw_event_id_seq OWNED BY public.log_event.id;


--
-- Name: user; Type: TABLE; Schema: public
--

CREATE TABLE public."user" (
    id integer NOT NULL,
    name character varying,
    data jsonb,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL
);


--
-- Name: user_id_seq; Type: SEQUENCE; Schema: public
--

CREATE SEQUENCE public.user_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: user_id_seq; Type: SEQUENCE OWNED BY; Schema: public
--

ALTER SEQUENCE public.user_id_seq OWNED BY public."user".id;


--
-- Name: log_event id; Type: DEFAULT; Schema: public
--

ALTER TABLE ONLY public.log_event ALTER COLUMN id SET DEFAULT nextval('public.raw_event_id_seq'::regclass);


--
-- Name: user id; Type: DEFAULT; Schema: public
--

ALTER TABLE ONLY public."user" ALTER COLUMN id SET DEFAULT nextval('public.user_id_seq'::regclass);


--
-- Name: log_event raw_event_pk; Type: CONSTRAINT; Schema: public
--

ALTER TABLE ONLY public.log_event
    ADD CONSTRAINT raw_event_pk PRIMARY KEY (id);


--
-- Name: user user_pk; Type: CONSTRAINT; Schema: public
--

ALTER TABLE ONLY public."user"
    ADD CONSTRAINT user_pk PRIMARY KEY (id);


--
-- Name: user user_after_insert; Type: TRIGGER; Schema: public
--

CREATE TRIGGER user_after_insert AFTER INSERT ON public."user" FOR EACH ROW EXECUTE FUNCTION public.notify_row_event_payload();


--
-- Name: user user_after_insert_statement; Type: TRIGGER; Schema: public
--

CREATE TRIGGER user_after_insert_statement AFTER INSERT ON public."user" REFERENCING NEW TABLE AS new_table FOR EACH STATEMENT EXECUTE FUNCTION public.notify_statement_event();


--
-- Name: user user_after_insert_update_delete; Type: TRIGGER; Schema: public
--

CREATE TRIGGER user_after_insert_update_delete AFTER INSERT OR DELETE OR UPDATE ON public."user" FOR EACH ROW EXECUTE FUNCTION public.notify_row_event();


--
-- Name: user user_delete_statement; Type: TRIGGER; Schema: public
--

CREATE TRIGGER user_delete_statement AFTER DELETE ON public."user" REFERENCING OLD TABLE AS old_table FOR EACH STATEMENT EXECUTE FUNCTION public.notify_statement_event();


--
-- Name: user user_update_statement; Type: TRIGGER; Schema: public
--

CREATE TRIGGER user_update_statement AFTER UPDATE ON public."user" REFERENCING OLD TABLE AS old_table NEW TABLE AS new_table FOR EACH STATEMENT EXECUTE FUNCTION public.notify_statement_event();


--
-- Name: TABLE log_event; Type: ACL; Schema: public
--

GRANT ALL ON TABLE public.log_event TO bkk;


--
-- Name: TABLE "user"; Type: ACL; Schema: public
--

GRANT ALL ON TABLE public."user" TO bkk;


--
-- PostgreSQL database dump complete
--

